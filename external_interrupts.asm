.include "m32def.inc"
.org 0
	jmp reset ; вектор прерывания по сброрсу
	jmp int_0 ; вектор прерывания по внешнему входу INT0
	jmp int_1 ; вектор прерывания по внешнему входу INT1
	jmp int_2 ; вектор прерывания по внешнему входу INT2
	jmp timer2_comp ; вектор прерывания по совпадению T/C2
	jmp timer2_ovf ; вектор прерывания по переполнению T/C2
	jmp timer1_capt ; вектор прерывания по захвату T/C1
	jmp timer1_compa ; вектор прерывания по совпадению T/C1A
	jmp timer1_compb ; вектор прерывания по совпадению T/C1B
	jmp timer1_ovf ; вектор прерывания по переполнению T/C2
	jmp timer0_comp ; вектор прерывания по совпадению T/C0
	jmp timer0_ovf ; вектор прерывания по переполнению T/C2
	jmp spi_cts ; вектор прерывания по окончанию обмена SPI
	jmp usart_rxc ; вектор прерывания по окончанию приема USART
	jmp usart_udre ; вектор прерывания когда UDR передатчика ...
	jmp usart_txc ; вектор прерывания по окончании передачи USART
	jmp a_d_c ; вектор прерывания по окончании преобразовании АЦП
	jmp ee_rdy ; вектор прерывания по готовности EEPROM
	jmp ana_comp ; вектор прерывания от аналогового компаратора
	jmp t_w_i ; вектор прерывания по окончании обмена TWI
	jmp spm_rdy ; вектор прерывания по готовности SPM

; ПОДПРОГРАММА ИНИЦИАЛИЗАЦИИ
reset:
	cli; флаг i=0 все прерывания запрещены
	ldi r16, 0x04 ; задаем Stack Pointer size High 
	out SPH, r16
	ldi r16, 0x5f; задаем Stack Pointer size Low
	out SPL, r16

	; настройка INT1
	ldi r16, 0x00 ; настройка PD2 на вход
	out DDRD, r16 ; установка PD1-PD0 на выход и вход соответственно
	out DDRB, r16 ; установка PD1-PD0 на выход и вход соответственно
	ldi r16, 0x0B ; включить срабатывание по фронту у ISC1, ISC0
	out MCUCR, r16; запись режима в регистр MCUCR
	ldi r16, 0x40; включение ISC2 по срезу
	out MCUCSR, r16
	ldi r16, 0xE0 ; включение прерывания для INT1
	out GICR, r16
	out GIFR, r16 ; очистка флага для INT1
	;настройка порта А
	ldi r16, 0xFF ; настройка PORTA на выход
	out DDRA, r16 ; запись режима в регистр DDRA
	out PORTA, r16 ; запись в регистр PORTA

	ldi r16, 0x80
	out DDRC, r16

	clr r20; счетчик 
	clr r21 ; пауза,стоп
	clr r22 ;is start
	sei; разрешение работы прерываний

main: nop
	rjmp main ; переход в начало программы

int_0: ; обработка нажатия для пауза/стоп
	inc r21 ; увеличить счетчик срабатывания прерывания
	cpi r21, 0x01 ; проверка включен ли режим паузы
	breq exit ; переход на выход из подпрограммы, если установлена пауза
	clr r20 ; очистка счетчика 
	clr r21 ; очистка сигнала стоп/пауза
	clr r22 ; установка сигнала "не запущен"
	out PORTA, r20 ; очистка индикатора счетчика
	
exit: 
	ldi r16, 0x00 ; выключение лампочки что конвеер работает
	out PORTC, r16 ; установка нового состояния на порте С
	reti ; выход из подпрограммы прерывания

int_1: ; обработка нажатия для счетчика
	cpi r22, 0x01; проверка запущен ли
	brne exit_2 ; переход на выход из подпрограммы если не запущен
	cpi r21, 0x01 ; проверка остановлен ли
	breq exit_2 ; переход на выход из подпрограммы, если на паузе
	cpi r20, 0x32 ; проверка прошло ли 50
	breq overflow 
	inc r20 ; увеличить счетчик  на единицу
	out PORTA, r20 ; вывод нового колличества  на ПОРТА
	rjmp exit_2
overflow:
	clr r20
	ldi r22, 0
exit_2:
	reti ; выход из подпрограммы прерывания

int_2: ; обработка нажатия для старт
	cpi r22, 0x01 ; проверка равен ли р22 единице
	breq start ; переход на выход из подпрограммы, если равен единице
	clr r20; очистка счетчика , если не запущен
	out PORTA, r20
	ldi r16, 0x80
	out PORTC, r16
	ldi r22, 0x01 ; включение
start:
	cpi r21, 0x01
	brne exit_3
	ldi r16, 0x80
	out PORTC, r16
	ldi r21, 0x00

exit_3: reti ; выход из подпрограммы прерывания
;int_0:
;int_1:
;int_2:
timer2_comp:
timer2_ovf:
timer1_capt:
timer1_compa:
timer1_compb:
timer1_ovf:
timer0_comp:
timer0_ovf:
spi_cts:
usart_rxc:
usart_udre:
usart_txc:
a_d_c:
ee_rdy:
ana_comp:
t_w_i:
spm_rdy: reti
