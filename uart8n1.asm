.include "m32def.inc"
.org 0
	jmp reset ; вектор прерывания по сброрсу
	jmp int_0 ; вектор прерывания по внешнему входу INT0
	jmp int_1 ; вектор прерывания по внешнему входу INT1
	jmp int_2 ; вектор прерывания по внешнему входу INT2
	jmp timer2_comp ; вектор прерывания по совпадению T/C2
	jmp timer2_ovf ; вектор прерывания по переполнению T/C2
	jmp timer1_capt ; вектор прерывания по захвату T/C1
	jmp timer1_compa ; вектор прерывания по совпадению T/C1A
	jmp timer1_compb ; вектор прерывания по совпадению T/C1B
	jmp timer1_ovf ; вектор прерывания по переполнению T/C2
	jmp timer0_comp ; вектор прерывания по совпадению T/C0
	jmp timer0_ovf ; вектор прерывания по переполнению T/C2
	jmp spi_cts ; вектор прерывания по окончанию обмена SPI
	jmp usart_rxc ; вектор прерывания по окончанию приема USART
	jmp usart_udre ; вектор прерывания когда UDR передатчика ...
	jmp usart_txc ; вектор прерывания по окончании передачи USART
	jmp a_d_c ; вектор прерывания по окончании преобразовании АЦП
	jmp ee_rdy ; вектор прерывания по готовности EEPROM
	jmp ana_comp ; вектор прерывания от аналогового компаратора
	jmp t_w_i ; вектор прерывания по окончании обмена TWI
	jmp spm_rdy ; вектор прерывания по готовности SPM

; ПОДПРОГРАММА ИНИЦИАЛИЗАЦИИ
reset:
	cli; флаг i=0 все прерывания запрещены
	ldi r16, 0x04 ; задаем Stack Pointer size High 
	out SPH, r16
	ldi r16, 0x5f; задаем Stack Pointer size Low
	out SPL, r16

	ldi r16, 0x02
	out DDRD, r16 ; установка PD1-PD0 на выход и вход соответственно
;настройка USART
	ldi r16, 0x00 ; Настройка BAUD = 9600 бит/с при F = 8 МГц, 0,15625% погрешность
	out UBRRH, r16
	ldi r16, 0x33
	out UBRRL, r16 ; запись числа 51(52,08 - 1) в UBRR
	ldi r16, 0b10000110; выбор UCSRC и установка размера посылки (8 бит), без бита проверки и один стоп бит
	out UCSRC, r16
	ldi r16, 0b00011000; 
	out UCSRB, r16; включение отправки и приема
	ldi r16, 0x00
	out UCSRA, r16; очистка флагов

	; Настройка Порта В
	ldi r16, 0xff ; настройка линий порта В на выход
	out DDRB, r16
	clr r16
	out PORTB, r16

	clr r20; очистка счетчика текущей комбинации для СДИ
	sei; разрешение работы прерываний

main: nop
	sbic UCSRA, 7; проверка флага наличия данных в регистре UDR(recieve)
	rcall peredacha_PK ; вызов подпрограммы проверки работы USART
	rjmp main ; переход в начало программы

peredacha_PK:
	in r16, UDR; считывание полученных данных
	nop
wait: sbis UCSRA, 5 ; проверка на то, были ли данные отправлены
	rjmp wait
	cpi r16, 0x8E; проверка на совпадение с заданной константой
	brne transmit; переход к отправке полученных данных обратно
	
	

while:
	ldi r31, high(tab_SDI*2) ; загрузка старшей части адроеса таблицы в регистровую пару Z
	ldi r30, low(tab_SDI*2) ; загрузка младшей части адроеса таблицы в регистровую пару Z

	clr r21; очистка регистра р21
	add r30, r20; сложение младшей части адреса комбинации СДИ
	adc r31, r21; сложение старшей части адреса комбинации СДИ

	lpm; загрузка следующей комбинации из таблицы комбинаций СДИ в r0
	out PORTB, r0; запись следующей комбинации в порт В
	
	rcall del; вызов подпрограммы задержки
	inc r20; увеличение счетчика комбинации
	cpi r20, 0x17; проверка на полный проход таблицы
	brcs while ; переход в начало если не все комбинации сработали
	clr r20 ; очистка счетчика текущей команды
	ldi r17, 0x00 
	out PORTB, r17 ; выключение индикатора
transmit:
	out UDR, r16 ; отправка полученных данных обратно
wait_1: sbis UCSRA, 5 ; проверка на то, были ли данные отправлены
	rjmp wait_1
	nop
	ret; возврат из функции подпрограммы


del:
	ldi r25, 0xC8	; запись числа 200 в регистр r19
m3:	ldi r24, 0x53	; запись числа 83 в регистр r18
m2:	ldi r23, 0x0C	; запись числа 12 в регистр r17
m1: nop				; пропустить такт
	dec r23			; уменьшение значения в регистре r17
	brne m1			; прыжок вначало цикла, если регистр r17 не обнулился
	nop				; пропустить такт
	dec r24			; уменьшение значения в регистре r18
	brne m2			; прыжок вначало цикла, если регистр r18 не обнулился
	nop				; пропустить такт
	dec r25			; уменьшение значения в регистре r19
	brne m3			; прыжок вначало цикла, если регистр r19 не обнулился
	
	ret				; возврат из функции

tab_SDI:
	.db 0x01, 0x02
	.db 0x04, 0x08
	.db 0x10, 0x20
	.db 0x40, 0x80

	.db 0x40, 0x20
	.db 0x10, 0x08
	.db 0x04, 0x02
	.db 0x01, 0xFF

	.db 0x00, 0xAA
	.db 0x55, 0xAA
	.db 0xFF, 0x00

int_0:
int_1:
int_2:
timer2_comp:
timer2_ovf:
timer1_capt:
timer1_compa:
timer1_compb:
timer1_ovf:
timer0_comp:
timer0_ovf:
spi_cts:
usart_rxc:
usart_udre:
usart_txc:
a_d_c:
ee_rdy:
ana_comp:
t_w_i:
spm_rdy: reti
